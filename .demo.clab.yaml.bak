name: frr01

topology:
  nodes:
    router1:
      kind: linux
      image: frrouting/frr:v7.5.1
      binds:
        - router1/daemons:/etc/frr/daemons
        - router1/frr.conf:/etc/frr/frr.conf
    router2:
      kind: linux
      image: frrouting/frr:v7.5.1
      binds:
        - router1/daemons:/etc/frr/daemons
        - router2/frr.conf:/etc/frr/frr.conf
    PC1:
      kind: linux
      image: praqma/network-multitool:latest
    talos:
      kind: linux
      image: ghcr.io/siderolabs/talos:v1.9.3
      env:
        USERDATA: 
        PLATFORM: container
        TALOSSKU: 2CPU-2048RAM
      binds:
        - /run
        - /system
        - /tmp
        - /var
        - /system/state
        - /etc/cni
        - /etc/kubernetes
        - /usr/libexec/kubernetes
        - /opt
  links:
    - endpoints: ["PC1:eth1", "router1:eth3"]
    - endpoints:
        - router2:eth3
        - talos:eth2
    - endpoints:
        - router2:eth2
        - router1:eth2
